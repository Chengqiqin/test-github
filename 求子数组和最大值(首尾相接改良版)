//2016 3.22 Cheng Qiqin  Hao Ying
//返回一个整数数组中最大子数组的和

#include<iostream>
using namespace std;

int main()
{
	int Array[100],sumOfArray[100],location[100][2],loc=0;//sumOfArray用于存放包含目前数的子数组的和的最大值,sum用来存放不包含当前数的所有子数组的和的最大值
	int i,j,length=0,sum,n=0, NegExit=0,Max;//用来记录数组长,sum用来存放不包含当前数的所有子数组的和的最大值,NegExit用来记录数组是否不含有正数
	cout<<"请输入数组："<<endl;
	for(length=0;;)
	{
		
		cin>>Array[length];
		if(Array[length]>0)//出现正数
		{
			NegExit=1;
		}
		length++;
		if(getchar()=='\n')
		{
			break;
		}
	}
	cout<<"这个数组的长度为："<<length<<endl;
	if(NegExit==1)//数组中有正数时，需要找到和最大的子数组，并记录子数组的位置
	{
		for(i=0;i<length;i++)
		{
			sumOfArray[i]=Array[0];
			sum=0;
			location[i][0]=i;
			location[i][1]=i;
			for(j=1;j<length;j++)
			{
				sum=max(sum,sumOfArray[i]);
				if(sumOfArray[i]<0&&sum<Array[j])
				{
					location[i][0]=i+j;
					location[i][1]=i+j;
				}
				sumOfArray[i]=max(sumOfArray[i]+Array[j],Array[j]); 
				if(sum<sumOfArray[i])
				{
					location[i][1]=i+j;
				}
			}
			int arr=Array[0];//将数组中的数向前移，实现数组首尾相连的功能
			for(j=1;j<length;j++)
			{
				Array[j-1]=Array[j];
			}
			Array[length-1]=arr;
			sumOfArray[i]=max(sum,sumOfArray[i]);//到数组中第i个数依次移到第一位时和最大的子数组的和
			if(i>0)
			{
				if(sumOfArray[i]>sumOfArray[i-1])
				{
					loc=i;			
				}
				sumOfArray[i]=max(sumOfArray[i-1],sumOfArray[i]);//此时所有子数组的和最大的值
			}
		}
		Max=sumOfArray[i-1];//这个整数数组的子数组之和的最大值
	}
	else//当数组中不存在正数时
	{
		Max=Array[0];
		for(i=0;i<length;i++)
		{
			if(Max<=Array[i])
			{
				Max=Array[i];
				location[loc][0]=i;
				location[loc][1]=i;
			}
		}
	}
	cout<<"这个整数数组的子数组之和的最大值为"<<Max<<endl;
	cout<<"子数组之和最大子数组的位置为:"<<endl;
	cout<<"注：输出的数表示这个子数组的每个元素是整数数组的第几个数"<<endl;
	cout<<"    若数组中有多个子数组之和最大，输出其中的一个"<<endl;
	cout<<"和最大的子数组位置为：";
	for(j=location[loc][0];j<=location[loc][1];j++)
	{
		if(j<length)
		{
			cout<<"Array["<<j<<"] ";
		}
		else
		{
			cout<<"Array["<<j-length<<"] ";
		}	
	}
	cout<<endl;	
	return 0;
}
